{"version":3,"sources":["../../src/compose/auth.js"],"names":["createAuthFuncs","domain","authCookieName","jwtSecret","keyExpiresIn","req","res","insecureUser","password_hash","rest","user","ip","createToken","token","cookie","path","maxAge","console","error","grantAccess","checkUserAuth","Promise","cookies","resolve","jwt","verify","err","decoded","payload","optionsOverride","options","expiresIn","reject","sign"],"mappings":";;;;;;;;QAGgBA,e,GAAAA,e;;AAHhB;;;;AACA;;;;;;;;;;AAEO,SAASA,eAAT,CAAyBC,MAAzB,EAAiCC,cAAjC,EAAiDC,SAAjD,EAA4DC,YAA5D,EAA0E;AAAA;AAAA,2EA4C7E,iBAA2BC,GAA3B,EAAgCC,GAAhC,EAAqCC,YAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGQ;AACA;AACOC,yCALf,GAKyCD,YALzC,CAKeC,aALf,EAKiCC,IALjC,4BAKyCF,YALzC;;AAOQ;;AACMG,gCARd,gBASeD,IATf;AAUYE,oCAAI,SAVhB,CAU0B;;;AAGlB;AACA;AACA;;AAfR;AAAA;AAAA,mCAiB4BC,YAAYF,IAAZ,CAjB5B;;AAAA;AAiBcG,iCAjBd;;;AAmBQP,gCAAIQ,MAAJ,CAAWZ,cAAX,EAA2BW,KAA3B,EAAkC;AAC9BE,sCAAM,GADwB;AAE9Bd,8CAF8B;AAG9Be,wCAAQ,kBAAGZ,YAAH;AAHsB,6BAAlC;AAnBR;AAAA;;AAAA;AAAA;AAAA;;AAyBQa,oCAAQC,KAAR,CAAc,cAAd;;AAzBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SA5C6E;;AAAA,wBA4C9DC,WA5C8D;AAAA;AAAA;AAAA;;AAE7E;;;;;;AAMA,aAASC,aAAT,CAAuBf,GAAvB,EAA4B;AACxB,eAAO,IAAIgB,OAAJ,CAAY,mBAAW;AAC1B,gBAAI,CAAChB,IAAIiB,OAAJ,CAAYpB,cAAZ,CAAL,EAAkC;AAC9BqB,wBAAQ,KAAR;AACH,aAFD,MAEO;AACHC,uCAAIC,MAAJ,CAAWpB,IAAIiB,OAAJ,CAAYpB,cAAZ,CAAX,EAAwCC,SAAxC,EAAmD,UAACuB,GAAD,EAAMC,OAAN,EAAkB;AACjEJ,4BAAQG,MAAM,KAAN,GAAcC,OAAtB;AACH,iBAFD;AAGH;AACJ,SARM,CAAP;AASH;;AAED;;;;;;;AAOA,aAASf,WAAT,CAAqBgB,OAArB,EAAoD;AAAA,YAAtBC,eAAsB,uEAAJ,EAAI;;AAChD,YAAMC;AACFC,uBAAW3B;AADT,WAECyB,eAFD,CAAN;;AAKA,eAAO,IAAIR,OAAJ,CAAY,UAACE,OAAD,EAAUS,MAAV,EAAqB;AACpCR,mCAAIS,IAAJ,CAAS,EAACL,gBAAD,EAAT,EAAoBzB,SAApB,EAA+B2B,OAA/B,EAAwC,UAACJ,GAAD,EAAMb,KAAN,EAAgB;AACpD,oBAAIa,GAAJ,EAAS;AACLM,2BAAON,GAAP;AACH,iBAFD,MAEO;AACHH,4BAAQV,KAAR;AACH;AACJ,aAND;AAOH,SARM,CAAP;AASH;;AA+BD,WAAO;AACHO,oCADG;AAEHD;AAFG,KAAP;AAIH","file":"auth.js","sourcesContent":["import jwt from 'jsonwebtoken'\nimport ms from 'ms'\n\nexport function createAuthFuncs(domain, authCookieName, jwtSecret, keyExpiresIn) {\n\n    /**\n     * Checks named cookie against jwt secret key\n     *\n     * @param req\n     * @returns {Promise<any>}\n     */\n    function checkUserAuth(req) {\n        return new Promise(resolve => {\n            if (!req.cookies[authCookieName]) {\n                resolve(false)\n            } else {\n                jwt.verify(req.cookies[authCookieName], jwtSecret, (err, decoded) => {\n                    resolve(err ? false : decoded)\n                })\n            }\n        })\n    }\n\n    /**\n     * creates new token based on any payload\n     *\n     * @param payload\n     * @param optionsOverride\n     * @returns {Promise<any>}\n     */\n    function createToken(payload, optionsOverride = {}) {\n        const options = {\n            expiresIn: keyExpiresIn,\n            ...optionsOverride\n        }\n\n        return new Promise((resolve, reject) => {\n            jwt.sign({payload}, jwtSecret, options, (err, token) => {\n                if (err) {\n                    reject(err)\n                } else {\n                    resolve(token)\n                }\n            })\n        })\n    }\n\n    async function grantAccess(req, res, insecureUser) {\n\n        try {\n            // removing password hash\n            //todo - move \"password_hash\" to config, as it's DB field name\n            const {password_hash, ...rest} = insecureUser\n\n            // todo - check ip\n            const user = {\n                ...rest,\n                ip: '0.0.0.0' // current IP should be here\n            }\n\n            // todo - get domain from env (doesn't work now on prod)\n            // const host = req.get('host')\n            // const hostname = host.split(':')[0]\n\n            const token = await createToken(user)\n\n            res.cookie(authCookieName, token, {\n                path: '/',\n                domain,\n                maxAge: ms(keyExpiresIn)\n            })\n        } catch (error) {\n            console.error('grantAccess:', error)\n        }\n    }\n\n    return {\n        checkUserAuth,\n        grantAccess\n    }\n}"]}