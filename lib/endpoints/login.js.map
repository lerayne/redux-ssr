{"version":3,"sources":["../../src/endpoints/login.js"],"names":["createLoginEP","console","log","authCookieName","options","defaultOptions","loginPagePath","rootPath","keyExpiresIn","requiredOptions","missingProp","find","propName","undefined","Error","domain","jwtSecret","getUser","checkUserAuth","grantAccess","redirectToFailure","req","res","redirect","url","format","pathname","query","next","body","nextUrl","error","currentUser","payload","email","user","bcrypt","compare","password","password_hash","passwordCorrect","login"],"mappings":";;;;;;kQAAA;;;;kBAiBwBA,a;;AAbxB;;;;AACA;;;;AAEA;;AACA;;;;;;AAOAC,QAAQC,GAAR,CAAY,gBAAZ,EAA8BC,8BAA9B;;AAEe,SAASH,aAAT,CAAuBI,OAAvB,EAAgC;;AAE3C,QAAMC,iBAAiB;AACnBF,sDADmB;AAEnBG,oDAFmB;AAGnBC,0CAHmB;AAInBC;AAJmB,KAAvB;;AAOA,QAAMC,kBAAkB,CACpB,WADoB,EAEpB,QAFoB,EAGpB,SAHoB,CAAxB;;AAMA,QAAMC,cAAcD,gBAAgBE,IAAhB,CAAqB;AAAA,eAAYP,QAAQQ,QAAR,MAAsBC,SAAlC;AAAA,KAArB,CAApB;;AAEA,QAAIH,WAAJ,EAAiB;AACb,cAAM,IAAII,KAAJ,sCAA6CJ,WAA7C,oBAAN;AACH;;AAEDN,2BACOC,cADP,EAEOD,OAFP;;AAKA;AACA;AAAA,uBASQA,OATR;AAAA,YAEQW,MAFR,YAEQA,MAFR;AAAA,YAGQZ,eAHR,YAGQA,cAHR;AAAA,YAIQa,SAJR,YAIQA,SAJR;AAAA,YAKQR,aALR,YAKQA,YALR;AAAA,YAMQF,cANR,YAMQA,aANR;AAAA,YAOQC,SAPR,YAOQA,QAPR;AAAA,YAQQU,OARR,YAQQA,OARR;;AAAA,+BAWyC,2BACjCF,MADiC,EAEjCZ,eAFiC,EAGjCa,SAHiC,EAIjCR,aAJiC,CAXzC;AAAA,YAWWU,aAXX,oBAWWA,aAXX;AAAA,YAW0BC,WAX1B,oBAW0BA,WAX1B;;AAkBI,YAAMC,oBAAoB,SAApBA,iBAAoB,CAASC,GAAT,EAAcC,GAAd,EAAmB;AACzCA,gBAAIC,QAAJ,CAAa,GAAb,EAAkBC,cAAIC,MAAJ,CAAW;AACzBC,0BAAUpB,cADe,EACAqB,OAAO;AAC5BC,0BAAMP,IAAIQ,IAAJ,CAASC,OADa;AAE5BC,2BAAO;AAFqB;AADP,aAAX,CAAlB;AAMH,SAPD;;AASA;AAAA,+EAAO,iBAAqBV,GAArB,EAA0BC,GAA1B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAEkCJ,cAAcG,GAAd,CAFlC;;AAAA;AAAA;AAEaW,2CAFb,SAEIC,OAFJ;;AAAA,qCAICD,WAJD;AAAA;AAAA;AAAA;;AAKC;AACAV,oCAAIC,QAAJ,CAAa,GAAb,EAAkBF,IAAIQ,IAAJ,CAASC,OAAT,IAAoB,GAAtC;AAND;AAAA;;AAAA;AAAA;AAAA,uCASoBb,QAAQI,IAAIQ,IAAJ,CAASK,KAAjB,CATpB;;AAAA;AASOC,oCATP;;AAAA,oCAWMA,IAXN;AAAA;AAAA;AAAA;;AAYK;AACAf,kDAAkBC,GAAlB,EAAuBC,GAAvB;AAbL;AAAA;;AAAA;AAAA;AAAA,uCAgBmCc,mBAAOC,OAAP,CAAehB,IAAIQ,IAAJ,CAASS,QAAxB,EAAkCH,KAAKI,aAAvC,CAhBnC;;AAAA;AAgBWC,+CAhBX;;;AAkBKvC,wCAAQC,GAAR,CAAY,iBAAZ,EAA+BsC,eAA/B;;AAlBL,oCAoBUA,eApBV;AAAA;AAAA;AAAA;;AAqBS;AACApB,kDAAkBC,GAAlB,EAAuBC,GAAvB;AAtBT;AAAA;;AAAA;AAAA;AAAA,uCAyBeH,YAAYE,GAAZ,EAAiBC,GAAjB,EAAsBa,IAAtB,CAzBf;;AAAA;AA0BSb,oCAAIC,QAAJ,CAAa,GAAb,EAAkBF,IAAIQ,IAAJ,CAASC,OAAT,IAAoBvB,SAAtC;;AA1BT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;;AAAA,qBAAsBkC,KAAtB;AAAA;AAAA;;AAAA,mBAAsBA,KAAtB;AAAA;AA+BH;AACJ","file":"login.js","sourcesContent":["/**\n * Created by lerayne on 22.03.17.\n */\n\nimport bcrypt from 'bcryptjs'\nimport url from 'url'\n\nimport {createAuthFuncs} from '../compose/auth'\nimport {\n    authCookieName,\n    loginPagePath,\n    rootPath,\n    keyExpiresIn\n} from '../constants/defaultOptions'\n\nconsole.log('authCookieName', authCookieName)\n\nexport default function createLoginEP(options) {\n\n    const defaultOptions = {\n        authCookieName,\n        loginPagePath,\n        rootPath,\n        keyExpiresIn\n    }\n\n    const requiredOptions = [\n        'jwtSecret',\n        'domain',\n        'getUser'\n    ]\n\n    const missingProp = requiredOptions.find(propName => options[propName] === undefined)\n\n    if (missingProp) {\n        throw new Error(`ERROR in createStaticGenerator: ${missingProp} not specified`)\n    }\n\n    options = {\n        ...defaultOptions,\n        ...options\n    }\n\n    //variable scoping\n    {\n        const {\n            domain,\n            authCookieName,\n            jwtSecret,\n            keyExpiresIn,\n            loginPagePath,\n            rootPath,\n            getUser\n        } = options\n\n        const {checkUserAuth, grantAccess} = createAuthFuncs(\n            domain,\n            authCookieName,\n            jwtSecret,\n            keyExpiresIn\n        )\n\n        const redirectToFailure = function(req, res) {\n            res.redirect(302, url.format({\n                pathname: loginPagePath, query: {\n                    next: req.body.nextUrl,\n                    error: 1\n                }\n            }))\n        }\n\n        return async function login(req, res) {\n\n            const {payload: currentUser} = await checkUserAuth(req)\n\n            if (currentUser) {\n                // Already logged in: redirect back\n                res.redirect(302, req.body.nextUrl || '/')\n            } else {\n\n                const user = await getUser(req.body.email)\n\n                if (!user) {\n                    // No such user\n                    redirectToFailure(req, res)\n                } else {\n                    //todo: \"password_hash\" change here too\n                    const passwordCorrect = await bcrypt.compare(req.body.password, user.password_hash)\n\n                    console.log('passwordCorrect', passwordCorrect)\n\n                    if (!passwordCorrect) {\n                        // Wrong password\n                        redirectToFailure(req, res)\n                    } else {\n                        // User is successfully authed!\n                        await grantAccess(req, res, user)\n                        res.redirect(302, req.body.nextUrl || rootPath)\n                    }\n                }\n            }\n        }\n    }\n}"]}