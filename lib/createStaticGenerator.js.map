{"version":3,"sources":["../src/createStaticGenerator.jsx"],"names":[],"mappings":"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","file":"createStaticGenerator.js","sourcesContent":["/**\n * Created by lerayne on 22.12.2017.\n */\n\"use strict\"\n\nimport {match, RouterContext} from 'react-router'\nimport {Provider} from 'react-redux'\nimport React from 'react'\nimport {renderToNodeStream} from 'react-dom/server'\n\nimport {createRouterRedirectFuncs} from './compose/routerRedirections'\nimport {createAuthFuncs} from './compose/auth'\nimport configureStore from './redux/configureStore'\nimport {\n    authCookieName,\n    loginPagePath,\n    rootPath,\n    keyExpiresIn,\n    setUserState,\n    isLoggedInFromState\n} from './constants/defaultOptions'\n\nexport default function createStaticGenerator(options) {\n\n    /* object configuration */\n\n    const defaultOptions = {\n        authCookieName,\n        loginPagePath,\n        rootPath,\n        keyExpiresIn,\n        setUserState,\n        isLoggedInFromState,\n    }\n\n    const requiredOptions = [\n        'getTemplate',\n        'getRootRoute',\n        'reducers',\n        'jwtSecret',\n        'domain'\n    ]\n\n    const missingProp = requiredOptions.find(propName => options[propName] === undefined)\n\n    if (missingProp) {\n        throw new Error(`ERROR in createStaticGenerator: ${missingProp} not specified`)\n    }\n\n    options = {\n        ...defaultOptions,\n        ...options\n    }\n\n    //variable scoping\n    {\n        const {\n            getTemplate,\n            getRootRoute,\n            reducers,\n            jwtSecret,\n            setUserState,\n            isLoggedInFromState,\n            authCookieName,\n            loginPagePath,\n            rootPath,\n            keyExpiresIn,\n            domain,\n        } = options\n\n        /**\n         * return static page as a stream (allows gradual load as the page renders)\n         * @param res - express resource\n         * @param getState\n         * @param reactNode\n         */\n        const streamHTML = function(res, getState, reactNode) {\n            const [headHTML, tailHTML] = getTemplate('{react-root}', getState()).split('{react-root}')\n\n            res.write(headHTML)\n\n            const stream = renderToNodeStream(reactNode)\n\n            stream.pipe(res, {end: false})\n\n            stream.on('end', () => {\n                res.write(tailHTML)\n                res.end()\n            })\n        }\n\n        //get functions for handling redirections by react-router\n        const {getOnEnterFunc, getOnChangeFunc} = createRouterRedirectFuncs(\n            isLoggedInFromState,\n            loginPagePath,\n            rootPath\n        )\n\n        const {checkUserAuth, grantAccess} = createAuthFuncs(\n            domain,\n            authCookieName,\n            jwtSecret,\n            keyExpiresIn,\n        )\n\n        /**\n         * Actual handler of express get routing\n         *\n         * @param req - express request\n         * @param res - express response\n         */\n        return async function generateStaticPage(req, res) {\n\n            //create redux store\n            const store = configureStore({}, reducers)\n\n            // get current user's authentication cookie status (false | jwt.verify object)\n            // Attention! Only the essential user info should be stored in a JWT cookie!\n            const {payload: currentUser} = await checkUserAuth(req)\n\n            if (currentUser) {\n                store.dispatch(setUserState(currentUser))\n\n                // reauthorize user\n                // todo - only reauthorize near expiration (performance). Now reauthorizing each time\n                await grantAccess(req, res, currentUser)\n            }\n\n            match({\n                location: req.url,\n                routes: getRootRoute(\n                    getOnEnterFunc(store.getState),\n                    getOnChangeFunc(store.getState)\n                )\n            }, async (error, redirectLocation, renderProps) => {\n\n                if (redirectLocation) { // Redirect required\n                    return res.redirect(302, redirectLocation.pathname + redirectLocation.search)\n                }\n\n                if (error) { // Any error occurs\n                    return res.status(500).send(error.message)\n                }\n\n                if (!renderProps) { // Router does not recognize path\n                    return res.status(404).send('Not found')\n                }\n\n                // seeks for \"initialize\" static function that returns a promise\n                const promises = []\n\n                renderProps.routes.forEach(route => {\n                    const component = route.component.WrappedComponent || route.component\n                    if (component.initialize) {\n                        promises.push(component.initialize(store.dispatch, renderProps.location))\n                    }\n                })\n\n                // todo - proper error handling with try-catch\n                if (promises.length) {\n                    // each promise resolves only after it make all necessary changes to store\n                    await Promise.all(promises)\n                }\n\n                streamHTML(res, store.getState,\n                    <Provider store={store}>\n                        <RouterContext {...renderProps} />\n                    </Provider>\n                )\n            })\n        }\n    }\n}"]}